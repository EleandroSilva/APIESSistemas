{*******************************************************}
{                    API PDV - JSON                     }
{                      ES Sistemas                      }
{            Início do projeto 27/05/2023               }
{                 www.bemoreweb.com.br                  }
{                     (17)98169-5336                    }
{                        2003/2023                      }
{         Analista desenvolvedor (Eleandro Silva)       }
{*******************************************************}
unit Model.Imp.Factory.Entidade;

interface

uses
  Model.Factory.Entidade.Interfaces,
  Model.DAO.Entidade.Interfaces,
  Model.Entidade.Usuario.Interfaces,
  Model.DAO.Imp.Entidade.Usuario,
  Model.Imp.Entidade.Usuario,
  Model.Entidade.Empresa.Interfaces,
  Model.DAO.Imp.Entidade.Empresa,
  Model.Entidade.Pessoa.Interfaces,
  Model.DAO.Imp.Entidade.Pessoa,
  Model.Entidade.Contato.Interfaces,
  Model.DAO.Imp.Entidade.Contato,
  Model.DAO.Entidade.Endereco.Interfaces,
  Model.DAO.Imp.Entidade.Endereco,
  Model.DAO.Entidade.Pessoa.Juridica.Interfaces,
  Model.DAO.Imp.Entidade.Pessoa.Juridica,
  Model.DAO.Entidade.Pessoa.Fisica.Interfaces,
  Model.DAO.Imp.Entidade.Pessoa.Fisica;

type
  TFactoryEntidade = class(TInterfacedObject, iFactoryEntidade)
    private
      FUsuario        : iDAOEntidade<iEntidadeUsuario>;
      FEmpresa        : iDAOEntidade<iEntidadeEmpresa>;
      FPessoa         : iDAOEntidade<iEntidadePessoa>;
      FContato        : iDAOEntidade<iEntidadeContato>;
      FEndereco       : iDAOEndereco;
      FPessoaFisica   : iDAOPessoaFisica;
      FPessoaJuridica : iDAOPessoaJuridica;
    public
      constructor Create;
      destructor Destroy; override;
      class function New: iFactoryEntidade;

      function Usuario        : IDAOEntidade<iEntidadeUsuario>;
      function Empresa        : IDAOEntidade<iEntidadeEmpresa>;
      function Pessoa         : IDAOEntidade<iEntidadePessoa>;
      function Contato        : iDAOEntidade<iEntidadeContato>;
      function Endereco       : iDAOEndereco;
      function PessoaFisica   : iDAOPessoaFisica;
      function PessoaJuridica : iDAOPessoaJuridica;
  end;

implementation

{ TFactoryEntidade }

constructor TFactoryEntidade.Create;
begin
  //
end;

class function TFactoryEntidade.New: iFactoryEntidade;
begin
  Result := Self.Create;
end;

destructor TFactoryEntidade.Destroy;
begin
  inherited;
end;

function TFactoryEntidade.Contato: iDAOEntidade<iEntidadeContato>;
begin
  if not Assigned(FContato) then
    FContato := TDAOContato.New;

  Result := FContato;
end;

function TFactoryEntidade.Pessoa: IDAOEntidade<iEntidadePessoa>;
begin
  if not Assigned(FPessoa) then
    FPessoa := TDAOPessoa.New;

  Result := FPessoa;
end;

function TFactoryEntidade.PessoaFisica: iDAOPessoaFisica;
begin
  if not Assigned(FPessoaFisica) then
    FPessoaFisica := TDAOPessoaFisica.New;

  Result := FPessoaFisica;
end;

function TFactoryEntidade.PessoaJuridica: iDAOPessoaJuridica;
begin
  if not Assigned(FPessoaJuridica) then
    FPessoaJuridica := TDAOPessoaJuridica.New;

  Result := FPessoaJuridica;
end;

function TFactoryEntidade.Empresa: IDAOEntidade<iEntidadeEmpresa>;
begin
  if not Assigned(FEmpresa) then
    FEmpresa := TDAOEmpresa.New;

  Result := FEmpresa;
end;

function TFactoryEntidade.Endereco: iDAOEndereco;
begin
  if not Assigned(FEndereco) then
    FEndereco := TDAOEndereco.New;

  Result := FEndereco;
end;

function TFactoryEntidade.Usuario:IDAOEntidade<iEntidadeUsuario>;
begin
  if not Assigned(FUsuario) then
    FUsuario := TDAOUsuario.New;

  Result := FUsuario;
end;

end.
