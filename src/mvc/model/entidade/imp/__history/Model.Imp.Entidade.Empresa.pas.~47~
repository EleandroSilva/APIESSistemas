{*******************************************************}
{                    API PDV - JSON                     }
{                      ES Sistemas                      }
{            Início do projeto 27/05/2023               }
{                 www.bemoreweb.com.br                  }
{                     (17)98169-5336                    }
{                        2003/2023                      }
{         Analista desenvolvedor (Eleandro Silva)       }
{*******************************************************}
unit Model.Imp.Entidade.Empresa;

interface

uses
  Model.Entidade.Empresa.Interfaces,
  Model.DAO.Entidade.Interfaces,
  Model.Entidade.Endereco.Interfaces,
  Model.Entidade.Contato.Interfaces,
  Model.DAO.Empresa.Interfaces,
  Model.Entidade.Pessoa.Juridica.Interfaces,
  Model.Entidade.Pessoa.Fisica.Interfaces,
  Model.Entidade.Pessoa.Interfaces,

  Model.Imp.Entidade.Endereco,
  Model.Imp.Entidade.Pessoa.Juridica,
  Model.Imp.Entidade.Pessoa.Fisica,
  Model.Imp.Entidade.Pessoa,
  Model.Imp.Entidade.Contato;
type
  TEntidadeEmpresa<T : iInterface> = class(TInterfacedObject, iEntidadeEmpresa<T>)
    private
      [weak]
      FParent         : T;
      FPessoa         : iEntidadePessoa<iEntidadeEmpresa<T>>;//injeção de dependência iEntidadePessoa
      FContato        : iEntidadeContato<iEntidadeEmpresa<T>>;//injeção de dependência iEntidadeContato
      FEndereco       : iEntidadeEndereco<iEntidadeEmpresa<T>>;//injeção de dependência iEntidadeEndereco
      FPessoaFisica   : iEntidadePessoaFisica<iEntidadeEmpresa<T>>;//injeção de dependência iEntidadePessoaFisica
      FPessoaJuridica : iEntidadePessoaJuridica<iEntidadeEmpresa<T>>;//injeção de dependência iEntidadePessoaJuridica
      FId             : Integer;
      FIdPessoa       : Integer;
      FNome           : String;
      FSobreNome      : String;
      FCNPJCPF        : String;
      FIERG           : String;
      FCep            : String;
      FLogradouro     : String;
      FNumero         : String;
      FBairro         : String;
      FMunicipio      : String;
      FEstado         : String;
      FTipologradouro : String;
      FEmail          : String;
      FDD             : String;
      FTelefone       : String;
      FTipoContato    : String;
    public
      constructor Create(Parent :T);
      destructor Destroy; override;
      class function New(Parent : T): iEntidadeEmpresa<T>;

      function Id(Value : Integer)            : iEntidadeEmpresa<T>; overload;
      function Id                             : Integer;          overload;
      function IdPessoa(Value : Integer)      : iEntidadeEmpresa<T>; overload;
      function IdPessoa                       : Integer;          overload;

      function Pessoa         : iEntidadePessoa<iEntidadeEmpresa<T>>;
      function Contato        : iEntidadeContato<iEntidadeEmpresa<T>>;
      function PessoaFisica   : iEntidadePessoaFisica<iEntidadeEmpresa<T>>;
      function PessoaJuridica : iEntidadePessoaJuridica<iEntidadeEmpresa<T>>;
      function Endereco       : iEntidadeEndereco<iEntidadeEmpresa<T>>;
      function &End           : T;
  end;


implementation

{ TEntidadeEmpresa }

constructor TEntidadeEmpresa<T>.Create(Parent: T);
begin
  FParent         := Parent;
  FPessoa         := TEntidadePessoa<iEntidadeEmpresa<T>>.New(Self);
  FContato        := TEntidadeContato<iEntidadeEmpresa<T>>.New(Self);
  FEndereco       := TEntidadeEndereco<iEntidadeEmpresa<T>>.New(Self);
  FPessoaJuridica := TEntidadePessoaJuridica<iEntidadeEmpresa<T>>.New(Self);
  FPessoaFisica   := TEntidadePessoaFisica<iEntidadeEmpresa<T>>.New(Self);
end;

class function TEntidadeEmpresa<T>.New(Parent : T): iEntidadeEmpresa<T>;
begin
  Result := Self.Create(Parent);
end;

function TEntidadeEmpresa<T>.&End: T;
begin
  Result := FParent;
end;

destructor TEntidadeEmpresa<T>.Destroy;
begin
  inherited;
end;

function TEntidadeEmpresa<T>.Id(Value: Integer): iEntidadeEmpresa<T>;
begin
  Result := Self;
  FID    := Value;
end;

function TEntidadeEmpresa<T>.Id: Integer;
begin
  Result := FId;
end;

function TEntidadeEmpresa<T>.IdPessoa(Value: Integer): iEntidadeEmpresa<T>;
begin
  Result := Self;
  FIdPessoa := Value;
end;

function TEntidadeEmpresa<T>.IdPessoa: Integer;
begin
  Result := FIdPessoa;
end;

function TEntidadeEmpresa<T>.Contato: iEntidadeContato<iEntidadeEmpresa<T>>;
begin
  Result := FContato;
end;

function TEntidadeEmpresa<T>.Endereco: iEntidadeEndereco<iEntidadeEmpresa<T>>;
begin
  Result := FEndereco;
end;

function TEntidadeEmpresa<T>.Pessoa: iEntidadePessoa<iEntidadeEmpresa<T>>;
begin
  Result := FPessoa;
end;

function TEntidadeEmpresa<T>.PessoaFisica: iEntidadePessoaFisica<iEntidadeEmpresa<T>>;
begin
  Result := FPessoaFisica;
end;

function TEntidadeEmpresa<T>.PessoaJuridica: iEntidadePessoaJuridica<iEntidadeEmpresa<T>>;
begin
  Result := FPessoaJuridica;
end;

end.
